#-*- coding: utf-8 -*-
import os
import glob
import argparse
import logging
from time import sleep
from google.cloud import storage
from google.cloud.storage import Blob
import google.cloud.exceptions
import telegram
from datetime import datetime
import base64
from googleapiclient import discovery
import json
#from oauth2client.client import GoogleCredentials
import re
import sys
from google.oauth2 import service_account
from google.cloud import vision
import io




class MotionAlert(object):
    def __init__(self, service_accopunt=None, gcs_bucket=None,
                 telegram_id=None, motion_target_dir=None, timestamp=None, message=None,
                 num_of_images=None):
        """
        Attributes:
            gcs_bucket: Google Cloud Storage Bucket Location
            telegram_id: Telegram ID to send images.
            motion_target_dir: Path to where Motion is storing its images.
            timestamp: Current timestamp, generated by the Motion event.
            body: Text of the message you want to send.
            num_of_images: An integer of the number of images you wish
                           to send in your alert.
        """

        self.gcs_bucket = gcs_bucket
        self.telegram_id = telegram_id
        self.motion_target_dir = motion_target_dir
        self.num_of_images = int(num_of_images)
        self.message = message

    def detect_faces(self, path):
        """Detects faces in an image."""
        try:
            credentials = service_account.Credentials.from_service_account_file('~/gcp-service-account.json')

            client = vision.ImageAnnotatorClient(credentials=credentials)

            # [START migration_face_detection]
            # [START migration_image_file]
            with io.open(path, 'rb') as image_file:
                content = image_file.read()

            image = vision.types.Image(content=content)
            # [END migration_image_file]

            response = client.face_detection(image=image)
            faces = response.face_annotations

            # Names of likelihood from google.cloud.vision.enums

            # If there is no face detected in the image
            if not faces:
                print "Face is not detected"
                return False
            else:
                return True
        except Exception as e:
            # Raise an error when vision api is called
            raise MotionAlertError("Vision API has an error from the image : {0}".format(path))

    def get_prediction(self, instance, project, model, version, ml_service):
        try:
            name = 'projects/{}/models/{}'.format(project, model)
            if version:
                name += '/versions/{}'.format(version)
            request_dict = {'instances': [instance]}
            request = ml_service.projects().predict(name=name, body=request_dict)
            return request.execute()  # waits till request is returned
        except Exception as e:
            # Raise an error when ML Engine is called
            raise MotionAlertError("ML Engine calling has an error from the instance : {0}".format(instance))


    def send(self):
        """Send an alert via Telegram from Motion.
        """

        # Get the specified series of images from the camera.
        image_paths = []
        video_paths = []
        for i in xrange(self.num_of_images):
            #image_file_path, video_file_path = \
            image_file_path = \
                self.get_latest_image_from_directory(self.motion_target_dir)
            # Wait 2 seconds to get next image
            image_paths.append(image_file_path)
            #video_paths.append(video_file_path)
            if i != self.num_of_images:
                sleep(1)
        
        # Try to upload that image to Google Cloud Storage.
        gcs_images = []
        if image_paths:
            for image_path in reversed(image_paths):
                self.send_alert_to_telegram(self.telegram_id, self.message, image_path)
        else:
            raise MotionAlertError("Could not retrieve an image to send.")

    def get_latest_image_from_directory(self, motion_target_dir):
        """Retrieves the most recently created .jpg file from target directory.

        Arguments:
            motion_target_dir: The directory in which Motion stores its images.

        Returns:
            String with path to most recently created image.
        """
        try:
            # Use a glob generator to find the newest image
            return max(glob.iglob('{0}/*.jpg'.format(motion_target_dir)), key=os.path.getctime)
        except ValueError as e:
            # Raise an error if we did not find any images
            raise MotionAlertError("Could not find any images in motion "
                                   "target directory: "
                                   "{0}".format(motion_target_dir))
        except OSError as e:
            # Raise an error if we cannot access the directory.
            raise MotionAlertError("Could not find the motion target dir: "
                                   "{0}".format(e))

    def upload_image_to_gcs(self, image_file_path, bucket_name):
        """Uploads images to Google Cloud Storage.

        Arguments:
            file_name : Name of image to upload on local machine
            image_file_path: Path to image to upload on local machine.
            bucket_name: Name of the GCS bucket.
        """
        project = "tribal-mapper-199302"
        credentials = service_account.Credentials.from_service_account_file('~/gcp-service-account.json')
        client = storage.Client(project, credentials)

        try:
            bucket = client.get_bucket(bucket_name)
        except Exception as e:
            # Error out if we're unable to locate the S3 bucket.
            raise MotionAlertError("Error connecting to GCS bucket: "
                                   "{0}".format(e))

        try:
            temp_image = image_file_path.split('/')
            image_file = temp_image[3] + "/" + temp_image[4]

            blob = Blob(image_file, bucket)

            with open(image_file_path, 'rb') as my_file:
                blob.upload_from_file(my_file)
        except Exception as e:
            # Error out if we're unable to upload the image.
            raise MotionAlertError("Error uploading file to GCS: {0}".format(e))

    def send_alert_to_telegram(self, id, body, filename):
        """Sends a Message using Telegram.
        """
        # Save log data 
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.INFO)

        # create a file handler
        handler = logging.FileHandler('/var/log/motion/alert.log')
        handler.setLevel(logging.INFO)

        #logging.basicConfig(filename='./alert.log',level=logging.DEBUG)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)

        # add the handlers to the logger
        logger.addHandler(handler)

        logger.info("sending a message")

        project = "<gcp_project_id>"
        model = "<model_name>"
        version = "<gcp_ml_engine_version>"
        
        credentials = service_account.Credentials.from_service_account_file('~/gcp-service-account.json')
        ml_service = discovery.build('ml', 'v1', credentials=credentials, cache_discovery=False)


        telegram_token = '<telegram_token>'
        # Send the alert using Telegram
        try:
            bot = telegram.Bot(token=telegram_token)
            with open(filename) as ff:
                content = ff.read()

            instance = {'key': '0', 'image_bytes': {'b64': base64.b64encode(content)}}

            detect_result = self.detect_faces(filename)

            # If face is not detected (return false)
            if not detect_result:
                msg = body
            else:
                prediction_result = self.get_prediction(instance, project,  model, version, ml_service)

                json_dump_data = json.dumps(prediction_result['predictions'])

                json_data = json.loads(json_dump_data)
                dad = json_data[0]["scores"][0]
                son = json_data[0]["scores"][1]

                msg = body + " 아빠일 확율 : {}%, 아들일 확율 : {}%".format(int(dad*100), int(son*100))    

            bot.sendMessage(chat_id=id, text=msg, timeout=10)
            bot.send_photo(chat_id=id, photo=open(filename, 'rb'), timeout=30)
        except Exception as e:
            raise MotionAlertError("Error Sending a Message : {0}".format(e))

    def send_video_to_telegram(self, id, body, filename):
        """Sends a Message using Telegram.
        """
        telegram_token = '<telegram_token>'
        # Send the alert using Telegram
        try:
            bot = telegram.Bot(token=telegram_token)
            bot.sendMessage(chat_id=id, text=body)
            bot.send_video(chat_id=id, video=open(filename, 'rb'))
        except Exception as e:
            raise MotionAlertError("Error Sending a Message : {0}".format(e))

class MotionAlertError(Exception):
    def __init__(self, message):
        """
        An Exception that handles output of errors to the user.

        Arguments:
            message: The message you want to display to the user for the
            exception.
        """
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.ERROR)

        # create a file handler
        handler = logging.FileHandler('/var/log/motion/error.log')
        handler.setLevel(logging.ERROR)

        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)

        logger.error("ERROR: {0}".format(message))

# Create a command line interface for our class.
parser = argparse.ArgumentParser(description="Motion Alert - send MMS alerts "
                                             "from Motion events.",
                                 epilog="Powered by Twilio!")

parser.add_argument("-b", "--gcs_bucket", default='thkang0',
                    help="Use a specific Google Cloud Storage Bucket.")
parser.add_argument("-t", "--telegram_id", default=None, required=True,
                    help="Telegram ID for the alerts.")
parser.add_argument("-d", "--motion_target_dir", default='/var/lib/motion', 
                    help="Directory where Motion is storing images from "
                         "motion capture.")
parser.add_argument("-i", "--num_of_images", default=1, required=True,
                    help="Message to send an alert.")
parser.add_argument("-m", "--message", default="움직임이 포착되었습니다.",
                    help="Number of image to send in an alert.")

# Configure our logging for the CLI output.
logging.basicConfig(level=logging.INFO, format="%(message)s")

# Present that CLI to the user when the Python file is executed.
if __name__ == "__main__":
    args = parser.parse_args()
    motion_alert = MotionAlert(**vars(args))
    motion_alert.send()
